// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/greetings.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GreetingsService_SayHello_FullMethodName                = "/greetings.GreetingsService/SayHello"
	GreetingsService_SayHelloServerStreaming_FullMethodName = "/greetings.GreetingsService/SayHelloServerStreaming"
	GreetingsService_SayClientStreaming_FullMethodName      = "/greetings.GreetingsService/SayClientStreaming"
	GreetingsService_SayBiDiStreaming_FullMethodName        = "/greetings.GreetingsService/SayBiDiStreaming"
)

// GreetingsServiceClient is the client API for GreetingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingsServiceClient interface {
	SayHello(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*HelloResponse, error)
	SayHelloServerStreaming(ctx context.Context, in *NamesList, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error)
	SayClientStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[HelloRequest, MessageList], error)
	SayBiDiStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HelloRequest, MessageList], error)
}

type greetingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingsServiceClient(cc grpc.ClientConnInterface) GreetingsServiceClient {
	return &greetingsServiceClient{cc}
}

func (c *greetingsServiceClient) SayHello(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, GreetingsService_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingsServiceClient) SayHelloServerStreaming(ctx context.Context, in *NamesList, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GreetingsService_ServiceDesc.Streams[0], GreetingsService_SayHelloServerStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NamesList, HelloResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetingsService_SayHelloServerStreamingClient = grpc.ServerStreamingClient[HelloResponse]

func (c *greetingsServiceClient) SayClientStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[HelloRequest, MessageList], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GreetingsService_ServiceDesc.Streams[1], GreetingsService_SayClientStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloRequest, MessageList]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetingsService_SayClientStreamingClient = grpc.ClientStreamingClient[HelloRequest, MessageList]

func (c *greetingsServiceClient) SayBiDiStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HelloRequest, MessageList], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GreetingsService_ServiceDesc.Streams[2], GreetingsService_SayBiDiStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloRequest, MessageList]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetingsService_SayBiDiStreamingClient = grpc.BidiStreamingClient[HelloRequest, MessageList]

// GreetingsServiceServer is the server API for GreetingsService service.
// All implementations must embed UnimplementedGreetingsServiceServer
// for forward compatibility.
type GreetingsServiceServer interface {
	SayHello(context.Context, *NoParams) (*HelloResponse, error)
	SayHelloServerStreaming(*NamesList, grpc.ServerStreamingServer[HelloResponse]) error
	SayClientStreaming(grpc.ClientStreamingServer[HelloRequest, MessageList]) error
	SayBiDiStreaming(grpc.BidiStreamingServer[HelloRequest, MessageList]) error
	mustEmbedUnimplementedGreetingsServiceServer()
}

// UnimplementedGreetingsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreetingsServiceServer struct{}

func (UnimplementedGreetingsServiceServer) SayHello(context.Context, *NoParams) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreetingsServiceServer) SayHelloServerStreaming(*NamesList, grpc.ServerStreamingServer[HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloServerStreaming not implemented")
}
func (UnimplementedGreetingsServiceServer) SayClientStreaming(grpc.ClientStreamingServer[HelloRequest, MessageList]) error {
	return status.Errorf(codes.Unimplemented, "method SayClientStreaming not implemented")
}
func (UnimplementedGreetingsServiceServer) SayBiDiStreaming(grpc.BidiStreamingServer[HelloRequest, MessageList]) error {
	return status.Errorf(codes.Unimplemented, "method SayBiDiStreaming not implemented")
}
func (UnimplementedGreetingsServiceServer) mustEmbedUnimplementedGreetingsServiceServer() {}
func (UnimplementedGreetingsServiceServer) testEmbeddedByValue()                          {}

// UnsafeGreetingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingsServiceServer will
// result in compilation errors.
type UnsafeGreetingsServiceServer interface {
	mustEmbedUnimplementedGreetingsServiceServer()
}

func RegisterGreetingsServiceServer(s grpc.ServiceRegistrar, srv GreetingsServiceServer) {
	// If the following call pancis, it indicates UnimplementedGreetingsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GreetingsService_ServiceDesc, srv)
}

func _GreetingsService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingsServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreetingsService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingsServiceServer).SayHello(ctx, req.(*NoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetingsService_SayHelloServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NamesList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetingsServiceServer).SayHelloServerStreaming(m, &grpc.GenericServerStream[NamesList, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetingsService_SayHelloServerStreamingServer = grpc.ServerStreamingServer[HelloResponse]

func _GreetingsService_SayClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetingsServiceServer).SayClientStreaming(&grpc.GenericServerStream[HelloRequest, MessageList]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetingsService_SayClientStreamingServer = grpc.ClientStreamingServer[HelloRequest, MessageList]

func _GreetingsService_SayBiDiStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetingsServiceServer).SayBiDiStreaming(&grpc.GenericServerStream[HelloRequest, MessageList]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetingsService_SayBiDiStreamingServer = grpc.BidiStreamingServer[HelloRequest, MessageList]

// GreetingsService_ServiceDesc is the grpc.ServiceDesc for GreetingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greetings.GreetingsService",
	HandlerType: (*GreetingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _GreetingsService_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloServerStreaming",
			Handler:       _GreetingsService_SayHelloServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayClientStreaming",
			Handler:       _GreetingsService_SayClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayBiDiStreaming",
			Handler:       _GreetingsService_SayBiDiStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greetings.proto",
}
